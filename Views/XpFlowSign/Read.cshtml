@inject IHtmlLocalizer<HrAdm.R0> R0
@inject IViewLocalizer R

<script nonce="@_Fun.Nonce">
    $(function () {
        _me.init();
    });

    var _me = {
        init: function () {        
            //datatable config
            var config = {
                columns: [
                    { data: 'FlowName' },
                    { data: 'SignerName' },
                    { data: 'SignTime' },
                    { data: '_Fun' },
                ],
                columnDefs: [
				    { targets: [2], render: function (data, type, full, meta) {
                        return _date.dtsToUiDt(data);
                    }},
				    { targets: [3], render: function (data, type, full, meta) {
                        return `<button type="button" class="btn btn-outline-secondary btn-sm" data-onclick="_me.onView" data-args="${full.FlowCode}, ${full.SourceId}">@R0["View"]</button>`;
                    }},
                ],
            };

            //initial
            //_me.edit0 = new EditOne();
            new CrudR(config);

            //other variables
            //_me.eform = $('#eform');
            _me.divSignRows = $('#divSignRows');
        },

        //auto called
        fnAfterOpenEdit: async function (fun, json) {
            _btn.setEdit('btnToRead', true, _me.divEdit);
            _input.set('SignStatus', 'Y', )
            var box = _me.divSignRows;
            await _ajax.getViewA('GetSignRows', { id: _me.edit0.getKey() }, function (html) {
                box.html(html);
            });
        },

        //on view row
        onView: async function (flowCode, key) {
            await _ajax.getJsonA('GetViewJson', { flowCode: flowCode, key: key }, function (json) {
                //consider other flow types
                _me.crudE.loadJson(json);
                _me.crudR.toEditMode(EstrFun.View);
            });
        },

        //onclick viewFile, called by XiFile component
        onViewFile: function (table, fid, elm) {
            _me.crudE.viewFile(table, fid, elm, _itext.get('Id', _me.eform0));
        },

    }; //class
</script>

<vc:xg-prog-path />
<div class="x-prog">
    <div id="divRead">
        <form id='formRead' class='x-form mb-2'>
            <div class="row">
                <div class="col-md-2 x-label">@R["SignTime"]</div>
                <div class="col-md-10 x-input">
                    @await Component.InvokeAsync("XiDate", new XiDateDto { Fid = "SignTime", InRow = true })
                    <span>～</span>
                    @await Component.InvokeAsync("XiDate", new XiDateDto { Fid = "SignTime2", InRow = true })
                    @await Component.InvokeAsync("XgFindTbar", new XgFindTbarDto { HasReset = true, SpanMode = true })
                </div>
            </div>
            @await Component.InvokeAsync("XiSelect", new XiSelectDto { Title = R["Flow"].Value, Fid = "FlowId", Rows = ViewBag.Flows, ClsBox = "x-date-w" })
            @*await Component.InvokeAsync("XiSelect", new XiSelectDto { Title = R["FlowStatus"].Value, Fid = "FlowStatus", rows = ViewBag.SignStatuses })*@
        </form>

        <table id="tableRead" class="table x-table" cellspacing="0">
            <thead>
                <tr>
                    <th>@R["Flow"]</th>
                    <th>@R["Asker"]</th>
                    <th>@R["SignTime"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="d-none">
        <form id='eform' class='x-form'>
            @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
            @await Component.InvokeAsync("XiRead", new XiReadDto { Title = R["Asker"].Value + " :", Fid = "UserName" })
            @await Component.InvokeAsync("XiRead", new XiReadDto { Title = R["Agent"].Value + " :", Fid = "AgentName" })
            @await Component.InvokeAsync("XiRead", new XiReadDto { Title = R["LeaveType"].Value + " :", Fid = "LeaveName" })
            @await Component.InvokeAsync("XiRead", new XiReadDto { Title = R["StartTime"].Value + " :", Fid = "StartTime", Format = BrFormatEstr.Dt2 })
            @await Component.InvokeAsync("XiRead", new XiReadDto { Title = R["EndTime"].Value + " :", Fid = "EndTime", Format = BrFormatEstr.Dt2 })
            @await Component.InvokeAsync("XiRead", new XiReadDto { Title = R["Hours"].Value + " :", Fid = "Hours" })
            @await Component.InvokeAsync("XiLink", new XiLinkDto { Title = R0["UpdFile"].Value + " :", Fid = "FileName" })
            @await Component.InvokeAsync("XiRead", new XiReadDto { Title = R0["Created"].Value + " :", Fid = "Created", Format = BrFormatEstr.Dt })

            <div class="row">
                <div class="col-md-2 x-label">@R["SignRows"] :</div>
                <div class="col-md-8 x-input" id="divSignRows"></div>
            </div>
        </form>

        <div class='x-center'>
            <button id='btnToRead' type='button' class='btn btn-primary' data-onclick='_me.crudR.onToRead'>@R0["ToRead"]<i class='ico-back'></i></button>
        </div>
    </div>
</div>